name: Go

on:
  push:
    branches: [ master ]
    tags:
      - 'v*' # Push events to mathcing v*, i.e. v1.0, v20.15.10

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi
        
    - name: PreBuild_Linux
      run: mkdir linux_bin

    - name: Build for Linux
      run: GOOS=linux GOARCH=amd64 go build -v -o stph .

    - name: PreBuild_Win
      run: mkdir windows_bin

    - name: Build for Windows
      run: GOOS=windows GOARCH=amd64 go build -v -o stph.exe .
    
    - name: Create Artifact
      run: zip stph.zip -r stph stph.exe configs/sample_settings.yaml templates/stph.html

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        # The name of the tag. This should come from the webhook payload, `github.GITHUB_REF` when a user pushes a new tag
        tag_name: ${{ github.ref }}
        # The name of the release. For example, `Release v1.0.1`
        release_name: Release ${{ github.ref }}
        # `true` to create a draft (unpublished) release, `false` to create a published one. Default: `false`
        draft: false
        # `true` to identify the release as a prerelease. `false` to identify the release as a full release. Default: `false`
        prerelease: false
    
    - name: Upload a Release Asset
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        # The URL for uploading assets to the release
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        # The path to the asset you want to upload
        asset_path: ./stph.zip
        # The name of the asset you want to upload
        asset_name: stph.zip
        # The content-type of the asset you want to upload. See the supported Media Types here: https://www.iana.org/assignments/media-types/media-types.xhtml for more information
        asset_content_type: application/zip
